@using OurGoT.Pages
@using System.Timers
@implements IDisposable

@page "/Play"

<h3>Player: @CurrentPlayer.Name</h3>
<h3>Money: @CurrentPlayer.Money</h3>
<h4 class = "Left-Up">Turn: @turn  </h4>

@if(Winner != "")
{
    <p class = "Head">Winner is @Winner</p>
}

<div class="Hand" style="height=(@height)px">
@foreach (var card in cardModels)
{
    <Card CardModel = "card" Resize = "true" OnMouseUp="()=>MouseUp(card.card)"/>
}
</div>

<div class="Tab Tab_Picture">
    @foreach(var x in gridModels)
    {
        x.Card = Tab[x.Idx, x.Idy];
        @if(Tab[x.Idx,x.Idy].Name == "*")
        {
            x.IsInvisible = true;
        }
        else
        {
            x.IsInvisible = false;
        }
        <Grid GridModel="x"  OnMouseUp="()=>MouseUp(x.Card)"/>
    }
</div>

 <div class="Showing">
 <Card CardModel = "@Show" Resize = "false" STYLE = "Bigger" />
 </div>



@code
{
    public static int turn = -1;
    public static Player CurrentPlayer = new Player("");
    public static Player Player1 = new Player("");
    public static Player Player2 = new Player("");
    public static Player NextPlayer = new Player("");
    public static Card[,] Tab = new Card[10, 10];
    public static List<Card> Graveyard = new List<Card>();
    public static Dictionary<Expression, int> TimeActions = new Dictionary<Expression, int>();
    public static Context Context = new Context();
    public static int x;
    public static int y;
    public static int Selection;
    public static List<int> Available = new List<int>();
    public static Card Aux = new Card();
    public List<Card> deck = new List<Card>();
    public static string Winner = "";
    public static List<GridModel> gridModels { get; set; } = new List<GridModel>();
    public static List<CardModel> cardModels { get; set; } = new List<CardModel>();
    public static int height;
    public static CardModel Show = new CardModel{id = 69,Opacity = true,card = new Card()};
    Timer timer;

    public void Dispose()
    {
        if (timer != null)
            timer.Dispose();
    }

    private void MouseUp(Card card)
    {
        Show = new CardModel {id=100, Opacity = true, card = card };
    
    }
    private void TimerOnElapsed(Object sender,ElapsedEventArgs e)
    {
        StateHasChanged();
    }
    protected override async void OnInitialized()
    {
        timer = new Timer();
        timer.Interval = 2000;
        timer.Elapsed += TimerOnElapsed;
        timer.Start();

        Context.Save(Player1.Name + ".Money", Player1.Money);
        Context.Save(Player2.Name + ".Money", Player2.Money);
        Context.Save(Player1.Name + ".Hand", Player1.Hand.Count());
        Context.Save(Player2.Name + ".Hand", Player2.Hand.Count());
        Context.Save(Player1.Name + ".CampCards", Player1.CampCards.Count());
        Context.Save(Player2.Name + ".CampCards", Player2.CampCards.Count());

        // deck.Create_Card();
        // return;


        deck = Deck.ReadDeck();

        for (int i = 0; i < 10; i++)
            for (int j = 0; j < 10; j++)
            {
                Tab[i, j] = new Card();
                gridModels.Add(new GridModel { Idx = i, Idy = j});
            }

        for (int i = 0; i < 3; i++)
        {
            Player1.Draw(deck, Methods.GetRandom(0, deck.Count() - 1));
            Player2.Draw(deck, Methods.GetRandom(0, deck.Count() - 1));
        }


        while (Methods.Continue(Player1) && Methods.Continue(Player2))
        { 

            Methods.ReadTab(Tab);
            if (turn != -1)
            {
                System.Console.WriteLine();
                System.Console.WriteLine("Change to Player : " + NextPlayer.Name);
            }
            else System.Console.WriteLine("Start game, First " + Player1.Name);
            turn++;
            if (turn % 2 == 1)
            {
                CurrentPlayer = Player2;
                NextPlayer = Player1;
            }
            else
            {
                CurrentPlayer = Player1;
                NextPlayer = Player2;
            }

            cardModels = new List<CardModel>();
            for(int z=0;z<CurrentPlayer.Hand.Count();z++)
            {
                cardModels.Add(new CardModel { id = z, card = CurrentPlayer.Hand[z], Opacity = CurrentPlayer.Hand[z].Conditions[0].Evaluate() > 0 });
            }
            height = 100 * CurrentPlayer.Hand.Count();
            

                Context.Save(CurrentPlayer.Name + ".Money", CurrentPlayer.Money);
                Context.Save(NextPlayer.Name + ".Money", NextPlayer.Money);
                Context.Save(CurrentPlayer.Name + ".Hand", CurrentPlayer.Hand.Count());
                Context.Save(NextPlayer.Name + ".Hand", NextPlayer.Hand.Count());
                Context.Save(CurrentPlayer.Name + ".CampCards", CurrentPlayer.CampCards.Count());
                Context.Save(NextPlayer.Name + ".CampCards", NextPlayer.CampCards.Count());
               
                await Task.Delay(1000);
                if (deck.Count() == 0)
                {
                    Methods.EndGame();
                    break;
                }
                System.Console.WriteLine("Your Money is  : " + CurrentPlayer.Money);
                CurrentPlayer.Draw(deck, Methods.GetRandom(0, deck.Count() - 1));
                
                if (TimeActions.Count() > 0)
                {
                    System.Console.WriteLine("Doing time actions");
                    Methods.DoTimeActions();
                }

                while (CurrentPlayer.CardLim < CurrentPlayer.Hand.Count())
                {
                    Graveyard.Add(CurrentPlayer.Hand[0]);
                    CurrentPlayer.Hand.RemoveAt(0);
                }
                Available = CurrentPlayer.AvailableCards();
                if (Available.Count() != 0)
                {
                    foreach (var c in Available)
                    {
                        System.Console.WriteLine("Card : " + c);
                        CurrentPlayer.Hand[c].ReadCard();
                    }
                    x = y = -1;

                    CurrentPlayer.Choose_Card();

                    if (Selection != -1)
                    {

                        while (!Methods.Validate_Position(x, y, Tab, turn, true) || CurrentPlayer.Hand[Selection].Conditions[0].Evaluate() == 0)
                        {
                            CurrentPlayer.Choose_Position(true, turn);
                        }

                        CurrentPlayer.Money -= CurrentPlayer.Hand[Selection].Cost;
                        Context.Save(CurrentPlayer.Name + ".Money", CurrentPlayer.Money);
                        Tab[x, y] = CurrentPlayer.Hand[Selection];
                        CurrentPlayer.CampCards.Add(CurrentPlayer.Hand[Selection]);
                        CurrentPlayer.Hand.RemoveAt(Selection);
                        CurrentPlayer.CampCards[CurrentPlayer.CampCards.Count() - 1].Posx = x;
                        CurrentPlayer.CampCards[CurrentPlayer.CampCards.Count() - 1].Posy = y;
                        Aux = CurrentPlayer.CampCards[CurrentPlayer.CampCards.Count() - 1];
                        Context.Save(CurrentPlayer.Name + ".Camp", CurrentPlayer.CampCards.Count());
                        Context.Save(CurrentPlayer.Name + ".Hand", CurrentPlayer.Hand.Count());
                        Context.Save(Aux.Name + ".Posx", Aux.Posx);
                        Context.Save(Aux.Name + ".Posy", Aux.Posy);
                    }
                }
                height = CurrentPlayer.Hand.Count() * 100;
                System.Console.WriteLine();
                System.Console.WriteLine("Moving Cards Camp");
                for (int i = 0; i < CurrentPlayer.CampCards.Count(); i++)
                {
                    Methods.ReadTab(Tab);
                    Aux = CurrentPlayer.CampCards[i];
                    System.Console.WriteLine("You have to pay {0} by {1}", (Aux.Cost / 10), Aux.Name);
                    CurrentPlayer.Money -= Aux.Cost / 10;
                    System.Console.WriteLine("Actual money {0}", CurrentPlayer.Money);
                    Context.Save(CurrentPlayer.Name + ".Money", CurrentPlayer.Money);
                    System.Console.WriteLine("Moving Card : ");
                    Aux.ReadCard();
                    do
                    {
                        if (Aux.Range == 0)
                        {
                            System.Console.WriteLine("This card cannot move");
                            x = -1;
                            break;
                        }
                        CurrentPlayer.Choose_Position(false, turn);
                        if (x == -1) break;

                        if (x == Aux.Posx && y == Aux.Posy)
                        {
                            x = -1;
                            break;
                        }
                    }
                    while (!Methods.Validate_Position(x, y, Tab, turn, false)
                       || Methods.Distance(x, y, Aux.Posx, Aux.Posy) > Aux.Range);

                    if (x != -1)
                    {
                        Tab[x, y] = Aux;
                        Tab[Aux.Posx, Aux.Posy] = new Card();
                        Aux.Posx = x;
                        Aux.Posy = y;
                        System.Console.WriteLine("Card moved to " + CurrentPlayer.CampCards[i].Posx + " " + CurrentPlayer.CampCards[i].Posy);
                        Context.Save(Aux.Name + ".Posx", Aux.Posx);
                        Context.Save(Aux.Name + ".Posy", Aux.Posy);
                    }
                    
                    await Task.Delay(1000);

                    bool[] used = new bool[Aux.Powers.Count()];
                    Selection = -1;
                    do
                    {
                        System.Console.WriteLine(Aux.Description);
                        CurrentPlayer.Choose_Power(Aux, used);

                        if (Selection == -1)
                            break;

                        if (Selection >= Aux.Conditions.Count() || Selection <= 0 || used[Selection])
                            continue;
                        used[Selection] = true;
                        if (Aux.Conditions[Selection].Evaluate() > 0)
                            Aux.Powers[Selection].Evaluate();
                        else System.Console.WriteLine("Power no available");
                        
                       
                    } while (Selection != -1);
                  
                }
            }
        }
    
}
